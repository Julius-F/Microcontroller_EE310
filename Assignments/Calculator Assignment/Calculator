/*
 * ---------------------
 * Title: Calculator
 * ---------------------
 * Program Details:
 *  To do basic arithmetic to two two digit inputs
 * Inputs: PORTD
 * Outputs: PORTB, 
 * Setup: C- Simulator
 * Date: 4/8/24
 * File Dependencies / Libraries: It is required to include the 
 * Configuration Header File 
 * Compiler: xc8, 2.4
 * Author: Julius Faller
 * Versions:
 *      V1.0: Original
 */

// PIC18F46K42 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1L
#pragma config FEXTOSC = LP     // External Oscillator Selection (LP (crystal oscillator) optimized for 32.768 kHz; PFM set to low power)
#pragma config RSTOSC = EXTOSC  // Reset Oscillator Selection (EXTOSC operating per FEXTOSC bits (device manufacturing default))

// CONFIG1H
#pragma config CLKOUTEN = OFF   // Clock out Enable bit (CLKOUT function is disabled)
#pragma config PR1WAY = ON      // PRLOCKED One-Way Set Enable bit (PRLOCK bit can be cleared and set only once)
#pragma config CSWEN = ON       // Clock Switch Enable bit (Writing to NOSC and NDIV is allowed)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor enabled)

// CONFIG2L
#pragma config MCLRE = EXTMCLR  // MCLR Enable bit (If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR )
#pragma config PWRTS = PWRT_OFF // Power-up timer selection bits (PWRT is disabled)
#pragma config MVECEN = ON      // Multi-vector enable bit (Multi-vector enabled, Vector table used for interrupts)
#pragma config IVT1WAY = ON     // IVTLOCK bit One-way set enable bit (IVTLOCK bit can be cleared and set only once)
#pragma config LPBOREN = OFF    // Low Power BOR Enable bit (ULPBOR disabled)
#pragma config BOREN = SBORDIS  // Brown-out Reset Enable bits (Brown-out Reset enabled , SBOREN bit is ignored)

// CONFIG2H
#pragma config BORV = VBOR_2P45 // Brown-out Reset Voltage Selection bits (Brown-out Reset Voltage (VBOR) set to 2.45V)
#pragma config ZCD = OFF        // ZCD Disable bit (ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON)
#pragma config PPS1WAY = ON     // PPSLOCK bit One-Way Set Enable bit (PPSLOCK bit can be cleared and set only once; PPS registers remain locked after one clear/set cycle)
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config DEBUG = OFF      // Debugger Enable bit (Background debugger disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Extended Instruction Set and Indexed Addressing Mode disabled)

// CONFIG3L
#pragma config WDTCPS = WDTCPS_31// WDT Period selection bits (Divider ratio 1:65536; software control of WDTPS)
#pragma config WDTE = OFF       // WDT operating mode (WDT Disabled; SWDTEN is ignored)

// CONFIG3H
#pragma config WDTCWS = WDTCWS_7// WDT Window Select bits (window always open (100%); software control; keyed access not required)
#pragma config WDTCCS = SC      // WDT input clock selector (Software Control)

// CONFIG4L
#pragma config BBSIZE = BBSIZE_512// Boot Block Size selection bits (Boot Block size is 512 words)
#pragma config BBEN = OFF       // Boot Block enable bit (Boot block disabled)
#pragma config SAFEN = OFF      // Storage Area Flash enable bit (SAF disabled)
#pragma config WRTAPP = OFF     // Application Block write protection bit (Application Block not write protected)

// CONFIG4H
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block not write-protected)
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)
#pragma config WRTSAF = OFF     // SAF Write protection bit (SAF not Write Protected)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE configuration bit is ignored)

// CONFIG5L
#pragma config CP = OFF         // PFM and Data EEPROM Code Protection bit (PFM and Data EEPROM code protection disabled)

#include <xc.h> // must have this
//#include "../../../../../Program Files/Microchip/xc8/v2.40/pic/include/proc/pic18f46k42.h"
#include "C:\Program Files\Microchip\xc8\v2.46\pic\include\proc\pic18f47k42.h"
//#include "C:\Program Files\Microchip\xc8\v2.40\pic\include\proc\pic18f46k42"

#define _XTAL_FREQ 4000000                 // Fosc  frequency for _delay()  library
#define FCY    _XTAL_FREQ/4

#include <stdio.h>
#include <stdlib.h>


char getnum()
{

    for(;;){
    PORTD = 0b00000010;
            if (PORTD == 0b10000010)
            {return 3;}
            else if (PORTD == 0b01000010)
            {return 6;}
            else if (PORTD == 0b00100010)
            {return 9;}
            
    PORTD = 0b00000100;
            if (PORTD == 0b10000100)
            {return 2;}
            else if (PORTD == 0b01000100)
            {return 5;}
            else if (PORTD == 0b00100100)
            {return 8;}
            else if (PORTD == 0b00010100)
            {return 0;}
    PORTD = 0b00001000;
            if (PORTD == 0b10001000)
            {return 1;}
            else if (PORTD == 0b01001000)
            {return 4;}
            else if (PORTD == 0b00101000)
            {return 7;}
    }
}

char getoperator()
{
    PORTD = 0b00000001;
    for(;;)
    {
            if (PORTD == 0b10000001)
            {return 1;}
            else if (PORTD == 0b01000001)
            {return 2;}
            else if (PORTD == 0b00100001)
            {return 3;}
            else if (PORTD == 0b00010001)
            {return 4;}
    }
}



void delay(long delaytime)
{
    long count = 0;
    while (count  < delaytime)
    {count += 1;}
}

char combine_inputs(char inputhigh, char inputlow)
{
    char fullinput;
    fullinput = inputlow + (inputhigh*10);
    return fullinput;
}

char execute_operation(char input1, char input2, char operator)
{
    char output;
    if(operator == 1)
    {output = input1 + input2;}
    else if(operator == 2)
    {output = input1 - input2;}
    else if(operator == 3)
    {output = input1 * input2;}
    else if(operator == 4)
    {output = input1 / input2;}
    return output;
}

void display( char display)
{
    PORTD = 0b00000010;
    char inputcheck = 0;
    while (inputcheck == 0)
    {
        if (PORTD == 0b00010010 )
        {
            PORTB = display;
            inputcheck = 1;
        }
    }
}

char X_Input_REG;
char xhigh;
char xlow;
char Y_Input_REG;
char yhigh;
char ylow;
char Operation_REG;
char Display_Result_REG;
signed char test;

void main(){
TRISD= 0b11110000; // Set port d to half outputs and half inputs to interface
// with the keypad
TRISB= 0b00000000; // set port b to output
ANSELB = 0;
ANSELD = 0;
test = -64;
PORTB = test;
delay(100000);
test = -32;
PORTB = test;
for(;;)
{
    xhigh = getnum();
    delay(20000);
    PORTB = 1;
    xlow = getnum();
    delay(20000);
    X_Input_REG = combine_inputs(xhigh,xlow);
    //PORTB = 0b10000000;
    PORTB = X_Input_REG;
    Operation_REG = getoperator();
    delay(20000);
    PORTB = 2;
    yhigh = getnum();
    delay(20000);
    PORTB = 1;
    ylow = getnum();
    delay(20000);
    Y_Input_REG = combine_inputs(yhigh,ylow);
    PORTB = Y_Input_REG;
    //PORTB = 0b11000000;
    Display_Result_REG=execute_operation(X_Input_REG,Y_Input_REG,Operation_REG);
    display(Display_Result_REG);
    Y_Input_REG = 0;
    X_Input_REG = 0;
}


}
